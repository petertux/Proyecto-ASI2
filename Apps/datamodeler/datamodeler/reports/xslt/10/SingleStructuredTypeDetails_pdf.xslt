<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="osdm_s_st" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="altova altovaext clitype fn iso4217 ix java link n1 sps xbrldi xbrli xlink xs xsd xsi">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-180962008-even" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-180962008-odd" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-180962008-even-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-180962008-odd-first" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-180962008-even-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-180962008-odd-last" margin-left="2cm" margin-right="2cm" page-height="21cm" page-width="29.70cm" margin-top="0.7cm" margin-bottom="0.7cm">
				<fo:region-body margin-top="1.30cm" margin-bottom="1.30cm" column-count="1"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="1.30cm"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-180962008">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-180962008-even-first" odd-or-even="even" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-180962008-odd-first" odd-or-even="odd" page-position="first"/>
					<fo:conditional-page-master-reference master-reference="page-master-180962008-even-last" odd-or-even="even" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-180962008-odd-last" odd-or-even="odd" page-position="last"/>
					<fo:conditional-page-master-reference master-reference="page-master-180962008-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-180962008-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:template match="/">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:declarations>
				<x:xmpmeta xmlns:x="adobe:ns:meta/">
					<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
						<rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
							<xmp:CreatorTool>Altova StyleVision Enterprise Edition 2011 rel. 3 sp1 (http://www.altova.com)</xmp:CreatorTool>
						</rdf:Description>
					</rdf:RDF>
				</x:xmpmeta>
			</fo:declarations>
			<fo:page-sequence force-page-count="no-force" master-reference="page-master-180962008" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_09D68288" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="1.30cm" overflow="hidden" display-align="after">
						<fo:block font-family="Tahoma" font-size="xx-small">
							<fo:inline-container>
								<fo:block>
									<xsl:text>&#x200B;</xsl:text>
								</fo:block>
							</fo:inline-container>
							<fo:table font-size="xx-small" width="25cm" table-layout="fixed" border-spacing="0">
								<fo:table-column column-width="18cm"/>
								<fo:table-column column-width="7cm"/>
								<xsl:variable name="altova:CurrContextGrid_09D68288" select="."/>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="left">
													<fo:inline>
														<xsl:text>Oracle Data Modeler</xsl:text>
													</fo:inline>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="3" display-align="center">
												<fo:block text-align="right">
													<fo:inline>
														<xsl:text>Page: </xsl:text>
													</fo:inline>
													<fo:page-number/>
													<fo:inline>
														<xsl:text> / </xsl:text>
													</fo:inline>
													<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows)">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block font-family="Tahoma" font-size="xx-small" empty-cells="show" text-align="left" display-align="before">
						<fo:inline-container>
							<fo:block>
								<xsl:text>&#x200B;</xsl:text>
							</fo:block>
						</fo:inline-container>
						<fo:block text-align="center" space-before="0" space-after="0" margin="0pt">
							<fo:inline font-size="medium" font-weight="bold">
								<xsl:text>Structured Type Details</xsl:text>
							</fo:inline>
						</fo:block>
						<fo:block>
							<fo:leader leader-pattern="space"/>
						</fo:block>
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:root">
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:block>
									<fo:leader leader-pattern="space"/>
								</fo:block>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="20cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="16cm"/>
									<xsl:variable name="altova:CurrContextGrid_0A98D528" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Design Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_0A8CFEC8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0A8CFEC8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0A8CFEC8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0A8CFEC8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:DesignName) &gt; 0">
																		<xsl:for-each select="n1:DesignName">
																			<xsl:variable name="value-of-template_081620A8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_081620A8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_081620A8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_081620A8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_09D9ED28">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_09D9ED28),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_09D9ED28"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_09D9ED28"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_0A722008">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0A722008),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0A722008"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0A722008"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:DesignName">
																	<xsl:variable name="value-of-template_07E962C0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07E962C0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07E962C0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07E962C0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Version Date</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_0807BD78">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0807BD78),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0807BD78"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0807BD78"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:VersionDate) &gt; 0">
																		<xsl:for-each select="n1:VersionDate">
																			<xsl:variable name="value-of-template_07FD0150">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_07FD0150),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_07FD0150"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_07FD0150"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_0AD014C8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_0AD014C8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_0AD014C8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_0AD014C8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_08014ED0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_08014ED0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_08014ED0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_08014ED0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:VersionDate">
																	<xsl:variable name="value-of-template_08014AE0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_08014AE0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_08014AE0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_08014AE0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Version Comment</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_080144D8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_080144D8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_080144D8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_080144D8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																		<xsl:for-each select="n1:VersionComment">
																			<xsl:for-each select="n1:VersionCommentDetails">
																				<xsl:for-each select="n1:VersionCommentRow">
																					<xsl:variable name="value-of-template_0800E7B0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0800E7B0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0800E7B0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0800E7B0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:choose>
																	<xsl:when test="count(n1:VersionComment/n1:VersionCommentDetails/n1:VersionCommentRow) &gt; 0">
																		<xsl:for-each select="n1:VersionComment">
																			<xsl:for-each select="n1:VersionCommentDetails">
																				<xsl:for-each select="n1:VersionCommentRow">
																					<xsl:variable name="value-of-template_08011C98">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08011C98),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08011C98"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08011C98"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise/>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_08059618">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_08059618),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_08059618"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_08059618"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:VersionComment">
																	<xsl:for-each select="n1:VersionCommentDetails">
																		<xsl:for-each select="n1:VersionCommentRow">
																			<xsl:variable name="value-of-template_08059228">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_08059228),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_08059228"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_08059228"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																			<fo:block/>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Model Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_08016C00">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_08016C00),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_08016C00"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_08016C00"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:ModelName) &gt; 0">
																		<xsl:for-each select="n1:ModelName">
																			<xsl:variable name="value-of-template_08010888">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_08010888),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_08010888"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_08010888"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_080152C0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_080152C0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_080152C0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_080152C0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_080118A8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_080118A8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_080118A8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_080118A8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:ModelName">
																	<xsl:variable name="value-of-template_080114B8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_080114B8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_080114B8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_080114B8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<fo:inline-container>
									<fo:block>
										<xsl:text>&#x200B;</xsl:text>
									</fo:block>
								</fo:inline-container>
								<fo:table width="15cm" table-layout="fixed" border-spacing="0">
									<fo:table-column column-width="4cm"/>
									<fo:table-column column-width="11cm"/>
									<xsl:variable name="altova:CurrContextGrid_09C25620" select="."/>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Structured Type Name</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell background-color="#a5e7ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:STName">
																		<xsl:variable name="value-of-template_08010E98">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_08010E98),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_08010E98"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_08010E98"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:STName) &gt; 0">
																		<fo:inline-container>
																			<fo:block>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:block>
																		</fo:inline-container>
																		<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																			<xsl:for-each select="n1:STName">
																				<xsl:variable name="value-of-template_07EC8CD0">
																					<xsl:apply-templates/>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="contains(string($value-of-template_07EC8CD0),'&#x200B;')">
																						<fo:block font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_07EC8CD0"/>
																						</fo:block>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline font-size="xx-small">
																							<xsl:copy-of select="$value-of-template_07EC8CD0"/>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</fo:block>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:STName">
																		<xsl:variable name="value-of-template_07EE3F18">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_07EE3F18),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_07EE3F18"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_07EE3F18"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:STName">
																		<xsl:variable name="value-of-template_07FEBA90">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_07FEBA90),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_07FEBA90"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_07FEBA90"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<fo:inline-container>
																	<fo:block>
																		<xsl:text>&#x200B;</xsl:text>
																	</fo:block>
																</fo:inline-container>
																<fo:block font-size="2em" font-weight="bold" space-before="0.67em" space-after="0.67em" margin="0pt">
																	<xsl:for-each select="n1:STName">
																		<xsl:variable name="value-of-template_07FEB1B0">
																			<xsl:apply-templates/>
																		</xsl:variable>
																		<xsl:choose>
																			<xsl:when test="contains(string($value-of-template_07FEB1B0),'&#x200B;')">
																				<fo:block font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_07FEB1B0"/>
																				</fo:block>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline font-size="xx-small">
																					<xsl:copy-of select="$value-of-template_07FEB1B0"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</fo:block>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>Super Type</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
													<fo:block text-align="left">
														<xsl:choose>
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																<xsl:for-each select="n1:STSuperType">
																	<xsl:variable name="value-of-template_07F016B8">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07F016B8),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07F016B8"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07F016B8"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<xsl:choose>
																	<xsl:when test="string-length(n1:STSuperType) &gt; 0">
																		<xsl:for-each select="n1:STSuperType">
																			<xsl:variable name="value-of-template_07ED4BF8">
																				<xsl:apply-templates/>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="contains(string($value-of-template_07ED4BF8),'&#x200B;')">
																					<fo:block>
																						<xsl:copy-of select="$value-of-template_07ED4BF8"/>
																					</fo:block>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline>
																						<xsl:copy-of select="$value-of-template_07ED4BF8"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:otherwise>
																		<fo:inline>
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																<xsl:for-each select="n1:STSuperType">
																	<xsl:variable name="value-of-template_07EB6828">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07EB6828),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07EB6828"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07EB6828"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<xsl:for-each select="n1:STSuperType">
																	<xsl:variable name="value-of-template_07EBFED0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07EBFED0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07EBFED0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07EBFED0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
															<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																<xsl:for-each select="n1:STSuperType">
																	<xsl:variable name="value-of-template_07EBF9F0">
																		<xsl:apply-templates/>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="contains(string($value-of-template_07EBF9F0),'&#x200B;')">
																			<fo:block>
																				<xsl:copy-of select="$value-of-template_07EBF9F0"/>
																			</fo:block>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:copy-of select="$value-of-template_07EBF9F0"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:when>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows)">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
								<fo:inline>
									<xsl:text>&#160;</xsl:text>
								</fo:inline>
								<xsl:if test="count( n1:DescriptionNotes )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<xsl:for-each select="n1:DescriptionNotes">
										<fo:inline-container>
											<fo:block>
												<xsl:text>&#x200B;</xsl:text>
											</fo:block>
										</fo:inline-container>
										<fo:table width="20cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="16cm"/>
											<xsl:variable name="altova:CurrContextGrid_09C38F08" select="."/>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Description</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_07EBF338">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EBF338),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EBF338"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EBF338"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																				<xsl:for-each select="n1:Description">
																					<xsl:for-each select="n1:DescriptionDetails">
																						<xsl:for-each select="n1:DescriptionRow">
																							<xsl:variable name="value-of-template_07EF2970">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07EF2970),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07EF2970"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07EF2970"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Description/n1:DescriptionDetails/n1:DescriptionRow) &gt; 0">
																				<xsl:for-each select="n1:Description">
																					<xsl:for-each select="n1:DescriptionDetails">
																						<xsl:for-each select="n1:DescriptionRow">
																							<xsl:variable name="value-of-template_07FEC210">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07FEC210),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07FEC210"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07FEC210"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_07EC1E88">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC1E88),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC1E88"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC1E88"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:Description">
																			<xsl:for-each select="n1:DescriptionDetails">
																				<xsl:for-each select="n1:DescriptionRow">
																					<xsl:variable name="value-of-template_07EC1A98">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC1A98),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC1A98"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC1A98"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
													<fo:table-row>
														<fo:table-cell background-color="#d9f5ff" border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
															<fo:block text-align="left">
																<fo:inline>
																	<xsl:text>Notes</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:choose>
																	<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																		<xsl:for-each select="n1:Notes">
																			<xsl:for-each select="n1:NotesDetails">
																				<xsl:for-each select="n1:NoteRow">
																					<xsl:variable name="value-of-template_07EC14D0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC14D0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC14D0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC14D0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																				<xsl:for-each select="n1:Notes">
																					<xsl:for-each select="n1:NotesDetails">
																						<xsl:for-each select="n1:NoteRow">
																							<xsl:variable name="value-of-template_07F00DD0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07F00DD0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07F00DD0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07F00DD0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																		<xsl:choose>
																			<xsl:when test="count(n1:Notes/n1:NotesDetails/n1:NoteRow) &gt; 0">
																				<xsl:for-each select="n1:Notes">
																					<xsl:for-each select="n1:NotesDetails">
																						<xsl:for-each select="n1:NoteRow">
																							<xsl:variable name="value-of-template_07EC03B0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07EC03B0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07EC03B0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07EC03B0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:otherwise/>
																		</xsl:choose>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																		<xsl:for-each select="n1:Notes">
																			<xsl:for-each select="n1:NotesDetails">
																				<xsl:for-each select="n1:NoteRow">
																					<xsl:variable name="value-of-template_07EC3D30">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC3D30),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC3D30"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC3D30"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																	<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																		<xsl:for-each select="n1:Notes">
																			<xsl:for-each select="n1:NotesDetails">
																				<xsl:for-each select="n1:NoteRow">
																					<xsl:variable name="value-of-template_07EC3940">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC3940),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC3940"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC3940"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:block/>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:when>
																</xsl:choose>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:for-each>
								</xsl:if>
								<xsl:if test="count( n1:DiagramsCollection)">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Used In Diagrams</xsl:text>
									</fo:inline>
									<fo:block/>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<fo:table width="8cm" table-layout="fixed" border-spacing="0">
										<fo:table-column column-width="8cm"/>
										<xsl:variable name="altova:CurrContextGrid_09C32510" select="."/>
										<fo:table-body start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<fo:table-row background-color="#d9f5ff">
													<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" font-weight="bold" padding="3" display-align="center">
														<fo:block text-align="center">
															<fo:inline>
																<xsl:text>Diagram Name</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
												<xsl:for-each select="n1:DiagramsCollection">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="left">
																<xsl:for-each select="n1:DiagramName">
																	<fo:basic-link text-decoration="underline" color="blue">
																		<xsl:variable name="altova:url" select="string(.)"/>
																		<xsl:choose>
																			<xsl:when test="not($altova:url)">
																				<xsl:attribute name="external-destination">
																					<xsl:text>url()</xsl:text>
																				</xsl:attribute>
																			</xsl:when>
																			<xsl:when test="substring($altova:url, 1, 1) = '#'">
																				<xsl:attribute name="internal-destination">
																					<xsl:value-of select="substring($altova:url, 2)"/>
																				</xsl:attribute>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:attribute name="external-destination">
																					<xsl:text>url(</xsl:text>
																					<xsl:choose>
																						<xsl:when test="starts-with($altova:url,'\\') or substring($altova:url,2,1)=':'">
																							<xsl:value-of select="concat('file:///',translate($altova:url,'\','/'))"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:call-template name="altova:double-backslash">
																								<xsl:with-param name="text">
																									<xsl:value-of select="$altova:url"/>
																								</xsl:with-param>
																								<xsl:with-param name="text-length">
																									<xsl:value-of select="string-length($altova:url)"/>
																								</xsl:with-param>
																							</xsl:call-template>
																						</xsl:otherwise>
																					</xsl:choose>
																					<xsl:text>)</xsl:text>
																				</xsl:attribute>
																			</xsl:otherwise>
																		</xsl:choose>
																		<fo:inline>
																			<xsl:value-of select="substring-after( . ,&apos;/&apos;)"/>
																		</fo:inline>
																		<fo:block/>
																	</fo:basic-link>
																</xsl:for-each>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:for-each>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows)">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-body>
									</fo:table>
								</xsl:if>
								<xsl:if test="count( n1:AttributesCollection)">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Attributes</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:AttributesCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="15cm"/>
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="4cm"/>
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="3cm"/>
											<xsl:variable name="altova:CurrContextGrid_07FCEFB0" select="."/>
											<fo:table-header background-color="#d9f5ff" text-align="center" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>No</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Attribute Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>M</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Data Type</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>DT </xsl:text>
																</fo:inline>
																<fo:block/>
																<fo:inline>
																	<xsl:text>kind</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Domain Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:AttributesCollection">
														<xsl:for-each select="n1:AttributeDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="right">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_07EC3378">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC3378),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC3378"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC3378"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:Sequence) &gt; 0">
																						<xsl:for-each select="n1:Sequence">
																							<xsl:variable name="value-of-template_07EBECE8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07EBECE8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07EBECE8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07EBECE8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_07EC2288">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC2288),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC2288"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC2288"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_07EC9C00">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC9C00),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC9C00"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC9C00"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:Sequence">
																					<xsl:variable name="value-of-template_07EC9810">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC9810),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC9810"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC9810"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_07EC9230">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC9230),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC9230"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC9230"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:AttributeName) &gt; 0">
																						<xsl:for-each select="n1:AttributeName">
																							<xsl:variable name="value-of-template_07EC0F70">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07EC0F70),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07EC0F70"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07EC0F70"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_07EC8140">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EC8140),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EC8140"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EC8140"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_07EE3B28">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EE3B28),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EE3B28"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EE3B28"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_07EE3738">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EE3738),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EE3738"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EE3738"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_07EE3170">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EE3170),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EE3170"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EE3170"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:M) &gt; 0">
																						<xsl:for-each select="n1:M">
																							<xsl:variable name="value-of-template_07EC2E18">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07EC2E18),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07EC2E18"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07EC2E18"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_07ED4008">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07ED4008),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07ED4008"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07ED4008"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_09CAC1A0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09CAC1A0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09CAC1A0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09CAC1A0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:M">
																					<xsl:variable name="value-of-template_09CAC4D0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09CAC4D0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09CAC4D0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09CAC4D0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_08483AE0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08483AE0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08483AE0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08483AE0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DataType) &gt; 0">
																						<xsl:for-each select="n1:DataType">
																							<xsl:variable name="value-of-template_09C54558">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_09C54558),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_09C54558"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_09C54558"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_09B8C9E8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09B8C9E8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09B8C9E8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09B8C9E8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_07EB82D0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB82D0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB82D0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB82D0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DataType">
																					<xsl:variable name="value-of-template_07EB7EE0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB7EE0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB7EE0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB7EE0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_07EB7918">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB7918),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB7918"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB7918"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DataTypeKind) &gt; 0">
																						<xsl:for-each select="n1:DataTypeKind">
																							<xsl:variable name="value-of-template_09D4A050">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_09D4A050),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_09D4A050"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_09D4A050"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_09C6BD30">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09C6BD30),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09C6BD30"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09C6BD30"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_07EBB1F0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EBB1F0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EBB1F0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EBB1F0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DataTypeKind">
																					<xsl:variable name="value-of-template_07EBA9C0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EBA9C0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EBA9C0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EBA9C0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_07EB9E78">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB9E78),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB9E78"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB9E78"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:DomainName) &gt; 0">
																						<xsl:for-each select="n1:DomainName">
																							<xsl:variable name="value-of-template_0A7DE0D8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A7DE0D8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A7DE0D8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A7DE0D8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_07EB86C0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB86C0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB86C0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB86C0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_07EB6438">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB6438),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB6438"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB6438"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:DomainName">
																					<xsl:variable name="value-of-template_07EB6078">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB6078),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB6078"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB6078"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:AttributesCommentsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Attributes Comments</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:AttributesCommentsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="6cm"/>
											<fo:table-column column-width="9cm"/>
											<fo:table-column column-width="9cm"/>
											<xsl:variable name="altova:CurrContextGrid_09C99358" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>No</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Attribute Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Description</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Notes</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:AttributesCommentsCollection">
														<xsl:for-each select="n1:AttributeCommentsDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="right">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:AttributeCommentsSequence">
																					<xsl:variable name="value-of-template_07ED0018">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07ED0018),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07ED0018"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07ED0018"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:AttributeCommentsSequence) &gt; 0">
																						<xsl:for-each select="n1:AttributeCommentsSequence">
																							<xsl:variable name="value-of-template_07EB73B8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07EB73B8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07EB73B8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07EB73B8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:AttributeCommentsSequence">
																					<xsl:variable name="value-of-template_07EBB968">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EBB968),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EBB968"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EBB968"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:AttributeCommentsSequence">
																					<xsl:variable name="value-of-template_08105710">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08105710),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08105710"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08105710"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:AttributeCommentsSequence">
																					<xsl:variable name="value-of-template_084F65E8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084F65E8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084F65E8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084F65E8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:AttributeCommentsName">
																					<xsl:variable name="value-of-template_09FE2048">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09FE2048),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09FE2048"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09FE2048"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:AttributeCommentsName) &gt; 0">
																						<xsl:for-each select="n1:AttributeCommentsName">
																							<xsl:variable name="value-of-template_0AC7F238">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0AC7F238),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0AC7F238"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0AC7F238"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:AttributeCommentsName">
																					<xsl:variable name="value-of-template_06B75220">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06B75220),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06B75220"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06B75220"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:AttributeCommentsName">
																					<xsl:variable name="value-of-template_0ACA0F68">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0ACA0F68),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0ACA0F68"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0ACA0F68"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:AttributeCommentsName">
																					<xsl:variable name="value-of-template_09FE29F0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09FE29F0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09FE29F0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09FE29F0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:AttributeDescription">
																					<xsl:for-each select="n1:AttributeDescriptionDetails">
																						<xsl:for-each select="n1:AttributeDescriptionRow">
																							<xsl:variable name="value-of-template_07EC1238">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_07EC1238),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_07EC1238"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_07EC1238"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:AttributeDescription/n1:AttributeDescriptionDetails/n1:AttributeDescriptionRow) &gt; 0">
																						<xsl:for-each select="n1:AttributeDescription">
																							<xsl:for-each select="n1:AttributeDescriptionDetails">
																								<xsl:for-each select="n1:AttributeDescriptionRow">
																									<xsl:variable name="value-of-template_081D5D78">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_081D5D78),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_081D5D78"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_081D5D78"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:AttributeDescription/n1:AttributeDescriptionDetails/n1:AttributeDescriptionRow) &gt; 0">
																						<xsl:for-each select="n1:AttributeDescription">
																							<xsl:for-each select="n1:AttributeDescriptionDetails">
																								<xsl:for-each select="n1:AttributeDescriptionRow">
																									<xsl:variable name="value-of-template_08142BE8">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_08142BE8),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_08142BE8"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_08142BE8"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise/>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:AttributeDescription">
																					<xsl:for-each select="n1:AttributeDescriptionDetails">
																						<xsl:for-each select="n1:AttributeDescriptionRow">
																							<xsl:variable name="value-of-template_08142088">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_08142088),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_08142088"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_08142088"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:AttributeDescription">
																					<xsl:for-each select="n1:AttributeDescriptionDetails">
																						<xsl:for-each select="n1:AttributeDescriptionRow">
																							<xsl:variable name="value-of-template_0AC90618">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0AC90618),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0AC90618"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0AC90618"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:AttributeNotes">
																					<xsl:for-each select="n1:AttributeNotesDetails">
																						<xsl:for-each select="n1:AttributeNoteRow">
																							<xsl:variable name="value-of-template_0814BC70">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0814BC70),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0814BC70"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0814BC70"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:AttributeNotes/n1:AttributeNotesDetails/n1:AttributeNoteRow) &gt; 0">
																						<xsl:for-each select="n1:AttributeNotes">
																							<xsl:for-each select="n1:AttributeNotesDetails">
																								<xsl:for-each select="n1:AttributeNoteRow">
																									<xsl:variable name="value-of-template_08006C10">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_08006C10),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_08006C10"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_08006C10"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:choose>
																					<xsl:when test="count(n1:AttributeNotes/n1:AttributeNotesDetails/n1:AttributeNoteRow) &gt; 0">
																						<xsl:for-each select="n1:AttributeNotes">
																							<xsl:for-each select="n1:AttributeNotesDetails">
																								<xsl:for-each select="n1:AttributeNoteRow">
																									<xsl:variable name="value-of-template_06AA0610">
																										<xsl:apply-templates/>
																									</xsl:variable>
																									<xsl:choose>
																										<xsl:when test="contains(string($value-of-template_06AA0610),'&#x200B;')">
																											<fo:block>
																												<xsl:copy-of select="$value-of-template_06AA0610"/>
																											</fo:block>
																										</xsl:when>
																										<xsl:otherwise>
																											<fo:inline>
																												<xsl:copy-of select="$value-of-template_06AA0610"/>
																											</fo:inline>
																										</xsl:otherwise>
																									</xsl:choose>
																									<fo:block/>
																								</xsl:for-each>
																							</xsl:for-each>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise/>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:AttributeNotes">
																					<xsl:for-each select="n1:AttributeNotesDetails">
																						<xsl:for-each select="n1:AttributeNoteRow">
																							<xsl:variable name="value-of-template_0A88E3E8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A88E3E8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A88E3E8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A88E3E8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:AttributeNotes">
																					<xsl:for-each select="n1:AttributeNotesDetails">
																						<xsl:for-each select="n1:AttributeNoteRow">
																							<xsl:variable name="value-of-template_0AD03930">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0AD03930),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0AD03930"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0AD03930"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																							<fo:block/>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:MethodsCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Methods</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:MethodsCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="5cm"/>
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="1cm"/>
											<fo:table-column column-width="5cm"/>
											<fo:table-column column-width="5cm"/>
											<fo:table-column column-width="7cm"/>
											<xsl:variable name="altova:CurrContextGrid_09D5F968" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>No</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Method Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>C</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>O</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Overriden Method</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Return Value</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Parameters</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:MethodsCollection">
														<xsl:for-each select="n1:MethodDetails">
															<fo:table-row display-align="before">
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="right">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:MethodSequence">
																					<xsl:variable name="value-of-template_0800FBE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0800FBE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0800FBE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0800FBE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:MethodSequence) &gt; 0">
																						<xsl:for-each select="n1:MethodSequence">
																							<xsl:variable name="value-of-template_0AC719F0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0AC719F0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0AC719F0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0AC719F0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:MethodSequence">
																					<xsl:variable name="value-of-template_09FE62C8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09FE62C8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09FE62C8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09FE62C8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:MethodSequence">
																					<xsl:variable name="value-of-template_081D10D8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_081D10D8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_081D10D8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_081D10D8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:MethodSequence">
																					<xsl:variable name="value-of-template_06B91030">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06B91030),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06B91030"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06B91030"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:MethodName">
																					<xsl:variable name="value-of-template_08438A08">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08438A08),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08438A08"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08438A08"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:MethodName) &gt; 0">
																						<xsl:for-each select="n1:MethodName">
																							<xsl:variable name="value-of-template_09CB5B68">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_09CB5B68),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_09CB5B68"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_09CB5B68"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:MethodName">
																					<xsl:variable name="value-of-template_0AD19BD0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0AD19BD0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0AD19BD0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0AD19BD0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:MethodName">
																					<xsl:variable name="value-of-template_0A928EE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A928EE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A928EE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A928EE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:MethodName">
																					<xsl:variable name="value-of-template_07F03068">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07F03068),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07F03068"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07F03068"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:MethodConstructor">
																					<xsl:variable name="value-of-template_09B68810">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09B68810),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09B68810"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09B68810"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:MethodConstructor) &gt; 0">
																						<xsl:for-each select="n1:MethodConstructor">
																							<xsl:variable name="value-of-template_0AC91508">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0AC91508),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0AC91508"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0AC91508"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:MethodConstructor">
																					<xsl:variable name="value-of-template_0ACAC1E8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0ACAC1E8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0ACAC1E8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0ACAC1E8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:MethodConstructor">
																					<xsl:variable name="value-of-template_09BFA768">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09BFA768),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09BFA768"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09BFA768"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:MethodConstructor">
																					<xsl:variable name="value-of-template_06A8C110">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06A8C110),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06A8C110"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06A8C110"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:MethodOverriding">
																					<xsl:variable name="value-of-template_06AD7720">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06AD7720),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06AD7720"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06AD7720"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:MethodOverriding) &gt; 0">
																						<xsl:for-each select="n1:MethodOverriding">
																							<xsl:variable name="value-of-template_06AF7508">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_06AF7508),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_06AF7508"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_06AF7508"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:MethodOverriding">
																					<xsl:variable name="value-of-template_06B36F48">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06B36F48),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06B36F48"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06B36F48"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:MethodOverriding">
																					<xsl:variable name="value-of-template_07F09B00">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07F09B00),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07F09B00"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07F09B00"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:MethodOverriding">
																					<xsl:variable name="value-of-template_0A8D4630">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A8D4630),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A8D4630"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A8D4630"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:MethodOverridenMethod">
																					<xsl:variable name="value-of-template_0817D288">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0817D288),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0817D288"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0817D288"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:MethodOverridenMethod) &gt; 0">
																						<xsl:for-each select="n1:MethodOverridenMethod">
																							<xsl:variable name="value-of-template_09DD4BD8">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_09DD4BD8),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_09DD4BD8"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_09DD4BD8"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:MethodOverridenMethod">
																					<xsl:variable name="value-of-template_080A3470">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_080A3470),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_080A3470"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_080A3470"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:MethodOverridenMethod">
																					<xsl:variable name="value-of-template_09B55708">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09B55708),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09B55708"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09B55708"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:MethodOverridenMethod">
																					<xsl:variable name="value-of-template_0A843078">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A843078),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A843078"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A843078"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:MethodReturnValue) &gt; 0">
																						<xsl:for-each select="n1:MethodReturnValue">
																							<xsl:variable name="value-of-template_0A80D7F0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A80D7F0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A80D7F0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A80D7F0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:MethodReturnValue) &gt; 0">
																						<xsl:for-each select="n1:MethodReturnValue">
																							<xsl:variable name="value-of-template_081BACF0">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_081BACF0),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_081BACF0"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_081BACF0"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:MethodReturnValue">
																					<xsl:variable name="value-of-template_09BF9238">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09BF9238),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09BF9238"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09BF9238"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:MethodReturnValue">
																					<xsl:variable name="value-of-template_09D72F48">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09D72F48),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09D72F48"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09D72F48"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:MethodReturnValue">
																					<xsl:variable name="value-of-template_06B5BFA0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06B5BFA0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06B5BFA0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06B5BFA0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<xsl:choose>
																			<xsl:when test="count(n1:MethodParametersCollection )">
																				<fo:block>
																					<fo:leader leader-pattern="space"/>
																				</fo:block>
																				<fo:inline-container>
																					<fo:block>
																						<xsl:text>&#x200B;</xsl:text>
																					</fo:block>
																				</fo:inline-container>
																				<xsl:if test="n1:MethodParametersCollection">
																					<fo:table text-align="center" table-layout="fixed" width="100%" border-spacing="0">
																						<fo:table-column column-width="3.300cm"/>
																						<fo:table-column column-width="3.300cm"/>
																						<xsl:variable name="altova:CurrContextGrid_080590C0" select="."/>
																						<fo:table-header background-color="#d9f5ff" start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline>
																												<xsl:text>Name</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline>
																												<xsl:text>Type</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-header>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<xsl:for-each select="n1:MethodParametersCollection">
																									<xsl:for-each select="n1:MethodParameterDetails">
																										<fo:table-row>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:ParameterName">
																																<xsl:variable name="value-of-template_0A824078">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0A824078),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0A824078"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0A824078"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:ParameterName) &gt; 0">
																																	<xsl:for-each select="n1:ParameterName">
																																		<xsl:variable name="value-of-template_09D7C038">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_09D7C038),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_09D7C038"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_09D7C038"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:ParameterName">
																																<xsl:variable name="value-of-template_0A73C868">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0A73C868),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0A73C868"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0A73C868"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:ParameterName">
																																<xsl:variable name="value-of-template_09DAE078">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_09DAE078),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_09DAE078"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_09DAE078"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:ParameterName">
																																<xsl:variable name="value-of-template_06B922A8">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_06B922A8),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_06B922A8"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_06B922A8"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																											<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																												<fo:block text-align="left">
																													<xsl:choose>
																														<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																															<xsl:for-each select="n1:ParameterType">
																																<xsl:variable name="value-of-template_09C0F910">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_09C0F910),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_09C0F910"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_09C0F910"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																															<xsl:choose>
																																<xsl:when test="string-length(n1:ParameterType) &gt; 0">
																																	<xsl:for-each select="n1:ParameterType">
																																		<xsl:variable name="value-of-template_06B5B698">
																																			<xsl:apply-templates/>
																																		</xsl:variable>
																																		<xsl:choose>
																																			<xsl:when test="contains(string($value-of-template_06B5B698),'&#x200B;')">
																																				<fo:block>
																																					<xsl:copy-of select="$value-of-template_06B5B698"/>
																																				</fo:block>
																																			</xsl:when>
																																			<xsl:otherwise>
																																				<fo:inline>
																																					<xsl:copy-of select="$value-of-template_06B5B698"/>
																																				</fo:inline>
																																			</xsl:otherwise>
																																		</xsl:choose>
																																	</xsl:for-each>
																																</xsl:when>
																																<xsl:otherwise>
																																	<fo:inline>
																																		<xsl:text>&#160;</xsl:text>
																																	</fo:inline>
																																</xsl:otherwise>
																															</xsl:choose>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																															<xsl:for-each select="n1:ParameterType">
																																<xsl:variable name="value-of-template_08077028">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_08077028),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_08077028"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_08077028"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																															<xsl:for-each select="n1:ParameterType">
																																<xsl:variable name="value-of-template_09C6BA90">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_09C6BA90),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_09C6BA90"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_09C6BA90"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																														<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																															<xsl:for-each select="n1:ParameterType">
																																<xsl:variable name="value-of-template_0AF0B180">
																																	<xsl:apply-templates/>
																																</xsl:variable>
																																<xsl:choose>
																																	<xsl:when test="contains(string($value-of-template_0AF0B180),'&#x200B;')">
																																		<fo:block>
																																			<xsl:copy-of select="$value-of-template_0AF0B180"/>
																																		</fo:block>
																																	</xsl:when>
																																	<xsl:otherwise>
																																		<fo:inline>
																																			<xsl:copy-of select="$value-of-template_0AF0B180"/>
																																		</fo:inline>
																																	</xsl:otherwise>
																																</xsl:choose>
																															</xsl:for-each>
																														</xsl:when>
																													</xsl:choose>
																												</fo:block>
																											</fo:table-cell>
																										</fo:table-row>
																									</xsl:for-each>
																								</xsl:for-each>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows)">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:if>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline>
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:TablesCollection )">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Used In Tables</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:TablesCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="8cm"/>
											<fo:table-column column-width="8.500cm"/>
											<fo:table-column column-width="8.500cm"/>
											<xsl:variable name="altova:CurrContextGrid_0A971DE0" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Model Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Table Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Column Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:TablesCollection">
														<xsl:for-each select="n1:TableDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:ModelName">
																					<xsl:variable name="value-of-template_09D69E60">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09D69E60),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09D69E60"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09D69E60"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:ModelName) &gt; 0">
																						<xsl:for-each select="n1:ModelName">
																							<xsl:variable name="value-of-template_09B59840">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_09B59840),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_09B59840"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_09B59840"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:ModelName">
																					<xsl:variable name="value-of-template_06B94500">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_06B94500),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_06B94500"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_06B94500"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:ModelName">
																					<xsl:variable name="value-of-template_09BA7978">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09BA7978),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09BA7978"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09BA7978"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:ModelName">
																					<xsl:variable name="value-of-template_08130788">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08130788),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08130788"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08130788"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:TableName">
																					<xsl:variable name="value-of-template_0A726750">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A726750),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A726750"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A726750"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:TableName) &gt; 0">
																						<xsl:for-each select="n1:TableName">
																							<xsl:variable name="value-of-template_0A8B8718">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A8B8718),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A8B8718"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A8B8718"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:TableName">
																					<xsl:variable name="value-of-template_07EB61C8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB61C8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB61C8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB61C8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:TableName">
																					<xsl:variable name="value-of-template_09CA90F8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09CA90F8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09CA90F8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09CA90F8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:TableName">
																					<xsl:variable name="value-of-template_084D6868">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084D6868),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084D6868"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084D6868"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="before">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_0A9498B8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A9498B8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A9498B8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A9498B8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:ColumnName) &gt; 0">
																						<xsl:for-each select="n1:ColumnName">
																							<xsl:variable name="value-of-template_06B37E60">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_06B37E60),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_06B37E60"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_06B37E60"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_0AC6BCE0">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0AC6BCE0),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0AC6BCE0"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0AC6BCE0"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_07EB7CE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EB7CE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EB7CE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EB7CE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:ColumnName">
																					<xsl:variable name="value-of-template_0A8336E8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A8336E8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A8336E8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A8336E8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
								<xsl:if test="count( n1:EntitiesCollection)">
									<fo:block>
										<fo:leader leader-pattern="space"/>
									</fo:block>
									<fo:inline font-size="xx-small" font-style="italic">
										<xsl:text>Used In Entities</xsl:text>
									</fo:inline>
									<fo:inline-container>
										<fo:block>
											<xsl:text>&#x200B;</xsl:text>
										</fo:block>
									</fo:inline-container>
									<xsl:if test="n1:EntitiesCollection">
										<fo:table width="25cm" table-layout="fixed" border-spacing="0">
											<fo:table-column column-width="12.500cm"/>
											<fo:table-column column-width="12.500cm"/>
											<xsl:variable name="altova:CurrContextGrid_0AC88DE0" select="."/>
											<fo:table-header background-color="#d9f5ff" start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<fo:table-row>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Entity Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
														<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" border-top-color="black" border-top-style="solid" border-top-width="thin" font-size="xx-small" padding="3" display-align="center">
															<fo:block text-align="center">
																<fo:inline>
																	<xsl:text>Attribute Name</xsl:text>
																</fo:inline>
															</fo:block>
														</fo:table-cell>
													</fo:table-row>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-header>
											<fo:table-body start-indent="0pt">
												<xsl:variable name="altova:tablerows">
													<xsl:for-each select="n1:EntitiesCollection">
														<xsl:for-each select="n1:EntityDetails">
															<fo:table-row>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-left-color="black" border-left-style="solid" border-left-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:EntityName">
																					<xsl:variable name="value-of-template_0ABE6CE8">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0ABE6CE8),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0ABE6CE8"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0ABE6CE8"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:EntityName) &gt; 0">
																						<xsl:for-each select="n1:EntityName">
																							<xsl:variable name="value-of-template_0843CE20">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0843CE20),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0843CE20"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0843CE20"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:EntityName">
																					<xsl:variable name="value-of-template_084E9298">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_084E9298),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_084E9298"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_084E9298"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:EntityName">
																					<xsl:variable name="value-of-template_07EDB328">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_07EDB328),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_07EDB328"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_07EDB328"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:EntityName">
																					<xsl:variable name="value-of-template_09D77748">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09D77748),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09D77748"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09D77748"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border-bottom-color="black" border-bottom-style="solid" border-bottom-width="thin" border-right-color="black" border-right-style="solid" border-right-width="thin" font-size="xx-small" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_0A7AF020">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0A7AF020),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0A7AF020"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0A7AF020"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<xsl:choose>
																					<xsl:when test="string-length(n1:AttributeName) &gt; 0">
																						<xsl:for-each select="n1:AttributeName">
																							<xsl:variable name="value-of-template_0A84CC28">
																								<xsl:apply-templates/>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="contains(string($value-of-template_0A84CC28),'&#x200B;')">
																									<fo:block>
																										<xsl:copy-of select="$value-of-template_0A84CC28"/>
																									</fo:block>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:inline>
																										<xsl:copy-of select="$value-of-template_0A84CC28"/>
																									</fo:inline>
																								</xsl:otherwise>
																							</xsl:choose>
																						</xsl:for-each>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:inline>
																							<xsl:text>&#160;</xsl:text>
																						</fo:inline>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_09CAFF88">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_09CAFF88),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_09CAFF88"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_09CAFF88"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_08130B30">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_08130B30),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_08130B30"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_08130B30"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;Word2007&apos;">
																				<xsl:for-each select="n1:AttributeName">
																					<xsl:variable name="value-of-template_0816D438">
																						<xsl:apply-templates/>
																					</xsl:variable>
																					<xsl:choose>
																						<xsl:when test="contains(string($value-of-template_0816D438),'&#x200B;')">
																							<fo:block>
																								<xsl:copy-of select="$value-of-template_0816D438"/>
																							</fo:block>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline>
																								<xsl:copy-of select="$value-of-template_0816D438"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																				</xsl:for-each>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</xsl:for-each>
													</xsl:for-each>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="string($altova:tablerows)">
														<xsl:copy-of select="$altova:tablerows"/>
													</xsl:when>
													<xsl:otherwise>
														<fo:table-row>
															<fo:table-cell>
																<fo:block/>
															</fo:table-cell>
														</fo:table-row>
													</xsl:otherwise>
												</xsl:choose>
											</fo:table-body>
										</fo:table>
									</xsl:if>
								</xsl:if>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:template>
	<xsl:template name="altova:double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="altova:double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
